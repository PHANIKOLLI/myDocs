#YAML IN KUBERENETES BASIC
# EVERY YAML FILE SHOULD HAVE FOLLOWING

--- pod-definition.yml-----------------------------
apiVersion: v1
kind: Pod 
#here kind and api version can be 
                  #Pod  and apiVersion is v1
                  #Service and apiVersion is v1
                  #ReplicaSet and apiVersion is apps/v1
                  #Deployment and apiVersion is apps/v1
#
metadata: 
  name: myapp-pod
  labels:
    app: myapp
    type: front-end
    
spec:
  containers:
    - name: nginx-controller
      image: nginx

--------------------------------------
#To create pod using above file
kubectl create -f pod-definition.yml
#note: here -f is used to provide file as input
#or
kubectl run myapp-pod --image=nginx --generator=run-pod/v1

#To see list of pods
kubectl get pods

#To see detailed information of pods like labels, containers, created time, events etc.
kubectl describe pod myapp-pod

#To remove the pod 
kubectl delete pod myapp-pod


#Example using hostPath volumes
#If you create a node pool with three local SSDs, the host OS mounts the disks at /mnt/disks/ssd0, /mnt/disks/ssd1 and /mnt/disks/ssd2. Your Kubernetes containers access the disks using the hostPath parameter in defined in your object's configuration file.

#This example Pod configuration file references a local SSD: /mnt/disks/ssd0:
----------------------------pod-def.yml---------------
apiVersion: v1
kind: Pod
metadata:
  name: "test-ssd"
spec:
  containers:
  - name: "shell"
    image: "ubuntu:14.04"
    command: ["/bin/sh", "-c"]
    args: ["echo 'hello world' > /test-ssd/test.txt && sleep 1 && cat /test-ssd/test.txt"]
    volumeMounts:
    - mountPath: "/test-ssd/"
      name: "test-ssd"
  volumes:
  - name: "test-ssd"
    hostPath:
      path: "/mnt/disks/ssd0"
  nodeSelector:
    cloud.google.com/gke-local-ssd: "true"

---------------------------------------------------------------

#======== kubectl replicas ======

---------------rc-definition.yml---------------
#note: the appVersion should be v1 for ReplicationController
apiVersion: v1
kind: ReplicationController
metadata: 
  name: webserver-rc
  labels:
    app: webserver
    type: front-end
    
spec:
  template:  
    metadata: 
      name: webserver-pod
      labels:
        app: webserver
        type: front-end    
    spec:
      container:
        - name: nginx-controller
          image: nginx  
  replicas: 3
--------------------------------------------

#To create replication COntroller using above file.
kubectl create -f rc-definition.yml

#To see created replication controllers
kubectl get replicationcontroller
#note: we can see desired-current-ready status

#To see no of pods created after running replicaiton controller
kubectl get pods -o wide
#NOte: we can see three pods if we used above to file to create replicas

#To remove the replicationcontroller  and also pods underlying
kubectl delete replicationcontroller webserver-rc
---------------ReplicaSet-definition.yml---------------
#note: the appVersion should be apps/v1 for ReplicationController
#if apiVersion is v1 , we can get error unable to recognize
apiVersion: apps/v1
kind: ReplicaSet
metadata: 
  name: webserver-replicaset
  labels:
    app: webserver
    type: front-end
    
spec:
  template:  
    metadata: 
      name: webserver-pod
      labels:
        app: webserver
        type: front-end    
    spec:
      container:
        - name: nginx-controller
          image: nginx  
  replicas: 3
  selector: #for repicaset selector is used as additonal feild
    matchLabels:
      type: front-end
--------------------------------------------


#To create replicaset using above file.
kubectl create -f replicaset-definition.yml

#-----------------------------------------------
#To increase the no. of replicas to 6 
#change the replicas to 6 in the above file
#then run the below command
kubectl replace -f replicaset-definition.yml

#or  we can do using tags for above file
kubectl scale --replicas=6 -f replicaset-definition.yml

#or  we can do using type and name format
kubectl scale --replicas=6 replicaset myapp-replicaset
#-----------------------------------------------------

#To see created replicaset
kubectl get replicaset
#note: we can see desired-current-ready status

#To see no of pods created after running replicaiton controller
kubectl get pods -o wide
#NOte: we can see three pods if we used above to file to create replicas

#To remove the replicaset and also pods underlying
kubectl delete replicaset webserver-replicaset

---------------------Expose - service - nginx.yml------external-load-balancer-----------------------------
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2019-12-21T08:52:57Z"
  finalizers:
  - service.kubernetes.io/load-balancer-cleanup
  labels:
    app: nginx-1
  name: nginx-1-service
  namespace: default
  resourceVersion: "15225"
  selfLink: /api/v1/namespaces/default/services/nginx-1-service
  uid: c9bacdea-513d-4cf5-9d99-3d21ed77b8e9
spec:
  clusterIP: 10.0.1.163
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 31672
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx-1
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 35.193.18.231
---------------------------------------------------------

----------------deploy-nginx-with replicas.yml-----no.of replicas=1------
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2019-12-21T08:32:52Z"
  generation: 2
  labels:
    app: nginx-1
  name: nginx-1
  namespace: default
  resourceVersion: "11734"
  selfLink: /apis/apps/v1/namespaces/default/deployments/nginx-1
  uid: dd0f6cf8-9a1d-4f7c-bfd7-dbb4bf8e9120
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx-1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx-1
    spec:
      containers:
      - image: nginx:latest
        imagePullPolicy: Always
        name: nginx
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2019-12-21T08:32:54Z"
    lastUpdateTime: "2019-12-21T08:32:54Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2019-12-21T08:32:52Z"
    lastUpdateTime: "2019-12-21T08:32:54Z"
    message: ReplicaSet "nginx-1-74c64df7b" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 2
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1



--------------------------------------------------------------------
-------------deploy-nginx-with replicas.yml-----no.of replicas=3----

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2019-12-21T08:32:52Z"
  generation: 3
  labels:
    app: nginx-1
  name: nginx-1
  namespace: default
  resourceVersion: "17905"
  selfLink: /apis/apps/v1/namespaces/default/deployments/nginx-1
  uid: dd0f6cf8-9a1d-4f7c-bfd7-dbb4bf8e9120
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx-1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx-1
    spec:
      containers:
      - image: nginx:latest
        imagePullPolicy: Always
        name: nginx
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 3
  conditions:
  - lastTransitionTime: "2019-12-21T08:32:52Z"
    lastUpdateTime: "2019-12-21T08:32:54Z"
    message: ReplicaSet "nginx-1-74c64df7b" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - lastTransitionTime: "2019-12-21T09:05:38Z"
    lastUpdateTime: "2019-12-21T09:05:38Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 3
  readyReplicas: 3
  replicas: 3
  updatedReplicas: 3

---------------------------------------------------------

# List all pods in ps output format.
kubectl get pods

# List all pods in ps output format with more information (such as node name).
kubectl get pods -o wide

# List all pods using labels
kubectl get pods -l environement=production, type=front-end

# List a single replication controller with specified NAME in ps output format.
kubectl get replicationcontroller web

# List deployments in JSON output format, in the "v1" version of the "apps" API group:
kubectl get deployments.v1.apps -o json

# List a single pod in JSON output format.
kubectl get -o json pod web-pod-13je7

# List a pod identified by type and name specified in "pod.yaml" in JSON output format.
kubectl get -f pod.yaml -o json

# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml.
kubectl get -k dir/

# Return only the phase value of the specified pod.
kubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}

# List resource information in custom columns.
kubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image

# List all replication controllers and services together in ps output format.
kubectl get rc,services

# List one or more resources by their type and names.
kubectl get rc/web service/frontend pods/web-pod-13je7


