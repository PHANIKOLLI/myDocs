CertificationTip:
 -  Here's a tip: 
  As you might have seen already, it is a bit difficult to create and edit YAML files. 
  Especially in the CLI. During the exam, you might find it difficult to copy and paste YAML files from browser to terminal.
  Using the kubectl run command can help in generating a YAML template. And sometimes, you can even get away 
  with just the kubectl run command without having to create a YAML file at all. 
  For example, if you were asked to create a pod or deployment with specific name and image 
  you can simply run the kubectl run command.

  #Use the below set of commands and try the previous practice tests again,
  # but this time try to use the below commands instead of YAML files. 
  #Try to use these as much as you can going forward in all exercises
  #Reference (Bookmark this page for exam. It will be very handy):
   - https://kubernetes.io/docs/reference/kubectl/conventions/
  note: 
   from kubectl v1.6 --generator is deprecated. In future versions it may be removed. 
   Generators other than run-pod/v1 are deprecated.
   
  -  Here's a quick tip. In the exam, you won't know if what you did is correct or not as in the practice tests in this course. 
      You must verify your work yourself. For example, if the question is to create a pod with a specific image,
      you must run the the kubectl describe pod command to verify the pod is created with the correct name and correct image.
   
   
POD:
 
 #Create an NGINX Pod:
     kubectl run --generator=run-pod/v1 nginx --image=nginx
     
 #Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run) :
     kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run -o yaml
 
Deployment:
    
  #Create a deployment
     kubectl run --generator=deployment/v1beta1 nginx --image=nginx
     #or 
    kubectl create deployment --image=nginx nginx
    
  #Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
     kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run -o yaml
      #or 
    kubectl create deployment --image=nginx nginx --dry-run -o yaml
    
   #Generate Deployment YAML file (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4)
     kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml
       #or 
    kubectl create deployment --image=nginx nginx --dry-run  --replicas=4 -o yaml
    #or
    kubectl scale deployment/webapp --replicas=3
    #or
   kubectl expose deployment webapp --type=NodePort --port=8080 --name=webapp-service --dry-run -o yaml > webapp-service.yaml
   #Save it to a file - (If you need to modify or add some other details before actually creating it)
     kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml > nginx-deployment.yaml
        #or 
    kubectl create deployment --image=nginx nginx --dry-run  --replicas=4 -o yaml > nginx-deployment.yaml
     

Service:

# To Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
   kubectl expose pod redis --port=6379 --name redis-service --dry-run -o yaml
  #(This will automatically use the pod's labels as selectors) 
   #Or
   kubectl create service clusterip redis --tcp=6379:6379 --dry-run -o yaml  
   #(This will not use the pods labels as selectors, instead it will assume selectors as app=redis. 
   #You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set. 
   # So generate the file and modify the selectors before creating the service)

#Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
   kubectl expose pod nginx --port=80 --name nginx-service --dry-run -o yaml
  #(This will automatically use the pod's labels as selectors, but you cannot specify the node port. 
  #You have to generate a definition file and then add the node port in manually before creating the service with the pod.)
  #Or
   kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run -o yaml
  #(This will not use the pods labels as selectors)
  #Both the above commands have their own challenges. 
  #While one of it cannot accept a selector the other cannot accept a node port.
  # I would recommend going with the `kubectl expose` command. 
  #If you need to specify a node port, generate a definition file using the same command and
   # manually input the nodeport before creating the service.