#https://aws.amazon.com/certification/certified-solutions-architect-associate/
#https://aws.amazon.com/faqs/
CSAA -   Certified Solution Architect - Associate
CSAP - Certified Solution Architect - Professional

CDA - Certified Developer Associate
CSOPA - Certified SysOPS Administrator

READ: FAQ's: WHITEPAPERS: Deep Dive Videos: and Re: Invent: Videos:

WELL ARCHITECTED AWS SOLUTION:

   - Security
   - performance Efficiency
   - Operational Excellence
   - Reliability
   - Cost Optimizations



CSAA-8-topics:
	- Compute:
			- EC2:
				 #https://aws.amazon.com/ec2/faqs/

        Instanes:
        - General Purpose        
            -> t,m   
            -> t2,t3,m3,m4 
            -> low-traffic-websites,web-applications 
            -> small and mid range db's
        - compute optimized     
            -> c    
            -> c3,c4       
            -> high performance frntend fleet of web servers and also for video encoding
        - memory optimized       
            -> x,r   
            -> r3          
            -> high performance databases, distributed mem caches
        - storage optimized      
            -> i,d   
            -> i2,d2       
            -> data warehousing , log or data-processing applications
        - accelerated computing  
            -> p,g,f -> g2          
            -> 3d applications streaming , machine learning
        EBS:
          - EBS are specific to AZ
          - when snapshot is taken they are stored in S3
          - If AZ goes down , still we can recover data 
          - We can send snapshots to other regions as well
           aws cli:
              aws ec2 create snapshot --volume-id <vol-id> --description ""  --region   us-east-2
              aws ec2 delete snapshot --snapshot-id <snap-id> --region   us-east-2
          Recommended way to create snapshot:
             - Pause all writes to volumes
             - Unmount the volume -> take snapshot -> remount the volume 
             -> stop the instance  -take snapshot (for root EBS volumes)
             - Foe encrypted volumes snapshots also creates the same encrypted 

			- Elastic Beanstalk
			- Lambda
	- Storage:
			- S3:
					#https://aws.amazon.com/s3/faqs/
			- Glacier
	- DB:
			- RDS:
					#https://aws.amazon.com/rds/faqs/
			- DyanamoDB
			- Redshift
	- Networking and content delivery:
			- VPC:
					#https://aws.amazon.com/vpc/faqs/

           Public Subnet: for weba nd app servers
           Private Subnet: for database servers
           NAT gateway: private internet access gateway
           Internet gateway: for public instance gateway for internet
           Elastic IP: attached to NAT gateway
           Route table: for public and private subnets
           Route table associations
			- CloudFront
			- Route53:
					#https://aws.amazon.com/route53/faqs/
			- Direct Connect
			- Elastic Load Balancer
	- Security Identity and Compliance:
			- IAM
			- WAF
	- Mgmt and Governance:
			- Cloud Watch 
			- Cloud Formation
			- AutoScaling
			- Config
			- Cloud trail
			- Trusted Advisor
	- Analytics:
			- Kinesis
	- Application Integrations:
			- SQS
			- SNS
			- SWF
	- Others:
		 - AWS WHITEPAPERS
		 - WELL ARCHITECTED FRAMEWORK
		 - Security BEST PRACTISES
=============================================================================================
                                IAM 
=============================================================================================

IAM:
	 - Identity Access Mgmt: 
			 #when we create user/group by default it won't have any access to aws resources.
			 #This is called default deny or Non-Explicit -Deny
			 #IAM Users and Groups should be given least access(only the required)  to AWS resources
       This is a Global service and not restricted to any specific region.
       - 'Access Advisor' shows the permissions granted to User and when theay are last used.
			- ARN - amazon resource name
			- arn:partition:service:region:account:resource #format
			- we can use arn for 
				users(IAM and federated),groups,policies, instance profiles, vMFA devices, server certificates
			- These are important part of IAM Polices to identify them easily.

			- IAM POLICY:
					- This is attached to either principals or Identity (users, groups, roles)  or resources(s3 bucket)
					- These are stored in JSON format
          - Template of typical IAM policy
            - version: Optional policy wide information
            - statement: one or more
            - effect: Whether policy allows or denies the applications
            - action: List of actions that are allowed or denied
            - resource: List of resources on which action can occur (typically contains ARN resources)
            - principal: Resource based policy who is granted permissions
            - conditions: Circumstances under which the policy grants permissions.

          sample Policy:

          -------------------------------------------------------------------------
           {
             "Version":"2012-07-15"
             "Statement": {
                 "Effect":"Allow"
                 "Action":"dynamodb:*"
                 "Resource":"arn:aws:dynamodb:us-east-2:130983218309:table/Books"
             }
           }

           {
              "Version":"2012-07-15"
              "Statement":{
                "Effect": "Allow"
                "Principal":{"AWS":"arn:iam::777797997897:user/bob"}
                "Action":[
                  "s3:PutObjets"
                  "s3:PutObjectsAcl"
                ]

              }

           } 
          
          -------------------------------------------------------------------------
          sample Policy:
          -------------------------------------------------------------------------
          example1:

             {
               "Version": "2012-05-17"
               "Statement": [
                  {
                    "Effect": "Allow"
                    "Action": [
                       "s3:ListAllMyBuckets",
                       "s3:GetBucketLocation"
                   ],
                   "Resource": "arn:aws:s3:::*"
                  },
                  {
                    "Effect": "Allow"
                    "Action": "s3:ListBucket"
                    "Resource": "arn:aws:s3::::<BUCKET-NAME>",
                    "conditions": "*"
                  },               

               ]            

             }

            -------------------------------------------------------------------------
            example2:
               {
                 "Version": "2012-05-17"
                 "Statement": [
                  {
                    "Effect": "Allow"
                    "Action": "s3:*"
                    "Resources": "*"
                  }
                 ]
               }
           -------------------------------------------------------------------------

					- Identity Policies:
							- Managed Policies:
									- AWS Managed Polices: policies creatd by AWS
									- Customer Managed Policies:
                      - IAM > Policies > Filters > select Customer Managed Policies 
                      - We need not to write the JSON . we can use visual editor and 
                      choose the permissions and JSON will be automatically populated.
							- Inline Policies:
								 - These are attached to particular users,roles
					- Resource Policies:
							- These are attached to the resources like S3 directly.
              - At present, there is only one type of resource-based policy called 
                a role trust policy, which is attached to an IAM role.
              - An IAM role is both an identity and a resource that supports resource-based policies.            
					- POLICY EVALUATION LOGIC:
               - if multiple policies are attached to a user either directly or indirectly from 
                  a group. then it proceeds with default deny.
                  order:
							- Explicit-deny > Explicit-allow  > default deny
          

			- IAM ROLES:
					- Users in AWS account access resources which they dont have access usually.
					- Users in one AWS account to access resource in another AWS account.
					- a mobile app  to use aws resources withoutany aws keys
					- Users who has identities outside of the AWS   
					- Third parties to perform temporary audits.
					- example:
						 -  AWS EC2 to access to S3 (No need to store keys in EC2 if IAM roles are used)
						 -  users in different aws accounts
						 -  Users from externally authenticated Users (web Identity Federation) - google, facebook etc.
						 -  Provide AWS  account owned by third party SAML 2.0 
						 -  WE CAN ATTACH ONLY ONE IAM ROLE TO EC2 Instance at this time:
									- It can be attached to running/stopped instance.
									- free of cost
						 - can't be added to groups
						 - can't make direct request to AWS services; they are meant to be used by authorized entities
							 such as IAM USER , apps , AWS service like EC2.

          - STS:
             - You assume an IAM role by calling the AWS 'Security Token Service' 
               Assume Role API's :
                  - AssumeRole
                  - AssumeRoleWithWebIdentity
                  - AssumeRoleWithSAML (Security Assertion Markup Language)

             - These API's return a set of temporary security Credentials that applications
               can then use to sign requests to AWS service APIs.

          Role:
             A set of permissions that grant access to the aws resources.
          AWS Service Role:
             A role that a service assumes to perform actions in your account on your behalf.
          AWS Service Linked Role:
             Prefedined by service and inludes all the perissions that the service requires to 
             call other AWS services on your behalf.
          Role Chaining:
             Roll chaining occurs when you use a role to assume a second role through AWS CLI.

          Federation:
             Creation of trust relationship between and external Identity provider and AWS.

          Trust Policy:
             JSON format document in which who is allowed to assume role is defined.

          Principal:
             AWS root user, IAM user, role

          Role for cross account access:
             Granting access to the resource in one account to a trusted principal in another account.

      - IAM Best Practises:
          - Lock Away AWS root user access keys
          - Create Individual IAM User
          - Configure strong policy for user
          - Rotate Credentials regularly
          - Remove Unneccesary Credentials
          - Enable MFA for Priviliged Users (i.e user accessing sensitive resources)
          - Use Groups to Assign permission to IAM Users
          - Use AWS defined policies whenever Possible
          - Use policy condition for exta security.
          - Grant Least Priviliges
          - Use AWS Access level to review IAM permissions i.e List, read, Write, All
          - Use Roles to delegate Permissions
          - Monitor activity in AWS account  using Logging features.
          - Logging features are available in CloudFront, CloudTrail, CLoudWatch, Config and S3


  Read IAM Works: 
    https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html

  You can create your own IAM policy using the following link:
    https://awspolicygen.s3.amazonaws.com/policygen.html

    aws s3 ls; #to see the s3 bucket list from cli
    aws s3 mv file1.txt  s3://<bucketname>  #to move file to the bucket
    aws s3 ls s3://<bucketname>  #to see list of files in bucketname

  Read Latest FAQ's:
    https://aws.amazon.com/iam/faqs/

   ---------------------------------------------------------------------------------------------

                          STS - SECURITY TOKEN SERVICE
   ---------------------------------------------------------------------------------------------
     
     - It is a web service, that enables  you to request temporary credentals for a limited period of time.
       to the IAM users or federated users.(external users)

     - Federated Users:
         - external users - managed  in external directory.
         - Using STS we ca give temporary access to this users.
     - AWS has soft limit of 5000 IAM users per account.

      - AssumeRoleWithWebIdentity:
          Provides access to the authorized apps throuh scail media apps like fb and gmail
          - Starts using the app
          - redirects authentication and receive ID token.
          - Login with Amazon IdP (fb gmail etc.,) 
          - Exchange IF token for cognito token
          - Exchange cgnito token fo temporary credentials.
          - Uses temporary credentials to acces the service.

      - AssumeRoleWithSAML (Security Assertion Markup Language): 
         provides single Signon link. using a external directory like LDAP
          - Users Bowses to IdP (Identity provider)
          - IdP authenticates User.
          - IdP return SAML assertion.
          - Client Posts SAML  assertion to sign-in url
          - ENdpoint validates and send redirect.
          - Client is sent to the AWS mgmt console.

 ---------------------------------------------------------------------------------------------
                        WAF - WEB APPLICATION FIREWALL &  SHEILD
 ---------------------------------------------------------------------------------------------
   WAF: free of cost.
   Helps in Protecting web applications from common exploits. like security, avilability and consumeexcessive resources.
  
  - This is used for Monitor the HTTP and HTTPS requests  that are forwarded to 
     AMAZON API,
     AMAZON CloudFront
     Application Load Balancer
  - It gives control over which trafic to allow/block using custom define security rules.

  vulnerebilities: WAF look for following vulnerebilties.
    - XSS - cross site scripting
    - IP address or address ranges that originating from .
    - Country or geographical location that requests originating from.
    - length of specified part of requests, such a query string.
    - SQL injection
    - HTTP headers or string inside the query string.

  WEB ACL:
    - these check conditon are defined in rules. and they are executed based on the order.

  AWS SHEILD:
    - provide protection against DDos Attacks.

   DDos Attack:
     Distributed Denial of services. Creates a overwhelming false traffic and makes the application 
     unavailabe to users. In shots it crases the applications.
 
  Types of sheilds:
    - AWS Sheild standard - free of cost:
       - Sheilds Network and Transport Layer DDos attacks that targets your webapplication.
    - AWS Sheild Advanced -addditional charges :
       - provides expanded DDos Attack protection for web applications running on EC2, CloudFront,
          ELB, ROUTE53
 ---------------------------------------------------------------------------------------------
 
 --------------------------------------------------------------------------------------------
                      SECURITY GROUPS
 --------------------------------------------------------------------------------------------
   - proctects Instances by applying security rules like firewall
   - we can configur re rules on security groups for different type of requests like
     HTTP,HTTPS,UDP,ICMP and port numbers.
   - By default when a new security grou is created. It 'denies' all traffic. Incoming/Inbound traffic.
   - By default Outgoing/outbound traffic is allowed.
   - Thes are called stateful. beacuse if inbound traffic is  allowed outgoing is automatically alowed.

 --------------------------------------------------------------------------------------------
                KMS & Cloud HSM
 --------------------------------------------------------------------------------------------
   KMS:
      - Key management service.
      - Used to create and control the encrypted keys
      - Integrated with most AWS services that encrypts ur data.
      - Creates and securely stres ur master keys  called   CMKs Customer manged Keys.
      - These CMKs are protected by FIPS-140-2 Validated Cryptographic modules.
           (FIPS - Federal Information Processing Standard.)
      - AWS CMK's are stored in default AWS KSM key store, but in a shared env.
      - Also supports custom keys tores backed by AWS cloudHSM Clusters.
           - this cloudHSM is used in the case of:
                - keys cnan'r stored in shared env.
                - keys must be backed to multiple env
                - The HSM that geerates and stores the material that must be certified at 
                   FIPS-140-2 LEVEL3
      - Types of CMK's contains (Customer Managed keys and Data Key)
         - Customer managed - customer can view,manage
         - AWS managed      - customer can view only.
         - AWS owned.       - can't be viewed or manged by customers.

  CloudHSM:
       - A Hardware Secuity Module (HSM). It's a computing device that process the Cryptographic 
         operations and provie secure storage for Cryptographic keys. 
       -  AWS provides HSM in cluster which we can create within the VPC.
       -  Comply with FIPS-140-2 Level3.
       - Comply with PCI-DSS 
             PAYMENT CARD INDUSTRY - DATA SECURITY STANDARD.
        - task with cloudHSM:
           - Generate, store, import, export and manage cryptographic keys including symmetric/assymetric keys.
           - symmetric/assymetric keys asre used to encrypt/decrypt the data. 
           - HMAC- Hash Based Message Authentication Codes.
           - Cryptographically sign data and verify signatures.

 =======================================================================================
                                 VPC Networking
 =======================================================================================
  VPC:
   - VPC belong to Single region
   - We can create multiple VPC's in a single region.

  CIDR:
   - Classless Inter Domain Routing
   - When creating the VPC, we need to provide the range of IP's in the CIDR format
     ex: 10.0.0.0/16 (Primary CIDR BLock)
  subnet:
   - A subnet is just a part of VPC that also has CIDR block.
   - A VPC can span multiple AZs, a subnet can only be inside a single AZ.
  subnet Types:
      - Public Subnet: 
          - Resources that have access to the internet and reachable from Internet.
      - Private Subnet:
          - Resources that are not exposed to internet.
  NAT:
     Network Address Traslation:
       - It's a physical device acts as a mediator b/w the instance inside the netwoek and Internet.

       - when an instance tries to access the website from internet. Then NAT
         keeps the track of the instance -> gets the information as NAT is actually tried to acces it
         and return to the instance without exposing IP of the instance inside the network.
     NAT Instance:
       - It's just an EC2 Instance with NAT capability which stays in Public subnet.
       - All private instances requests go through this NAT to access the Internet.
     NAT gateway:
       - It's a AWS managed NAT device.
       - Highly available and Scalable Solutions from AWS.
     Internet Gateway: (IGW)
       - A horizontally scalable, redundant, HA VPC compononent that enables internet.
       Purpose:
           - To provie target in our VPC route tables for Internet routable traffic and to 
             perform NAT for instances that have been assigned with Public IP.
     NAT vs IGW:
         NAT works at subnet level.
         IGW works at VPC level.
     Route table:
         - Contains set of rules. that determines where the traffic is redirected.
         - Each route in a table specifies a destination CIDR and a target.
         - Each subnet should be associated with a route table.
         - If we don't associate a route table then it is associated with maain table.
         - We can't delete the main table but replace it with the custom table.
         - Every route table contains the local route for communication within the VPC over IPV4
         - When we add - IGW
                       - Egress oly IGW
                       - Virtual private gateway
                       - NAT device
                       - peering connection
                       - VPC endpoint in VPC
           we must update the route table for any subnet that uses these gateways or connections.

     SECURITY GROUPS: STATEFUL:works at Instance level:
      - proctects Instances by applying security rules like firewall.
      - we can configur re rules on security groups for different type of requests like
        HTTP,HTTPS,UDP,ICMP and port numbers.

      - By default when a new security group is created. It 'denies' all Incoming/Inbound traffic.
      - By default Outgoing/outbound traffic is allowed.
      - These are called 'stateful' because if inbound traffic is  allowed outgoing is 
        automatically alowed.

     NACL: Network Access Control Lists: works at Subnet Level: STATELESS
       - These works at subnet level.
       - Manually enable both inbound/outbound traffic IP and ports.
       - It consists of ordered rules:
           - Rule number
           - Protocols
           - The source of the traffic (CIDR range) and destination (listening port or port range (Inbound Only)
           - The destination of the traffic (CIDR range) and destination (listening port or port range (Outbound Only)
       - CHOICE to ALLOW/DENY specific traffic. 

      - default NACL allows all the traffic by default,
      - Custom NACL denies all the traffic by default.

     When we create vpc with CIDR AWS uses 1st 5 ip addresses. ex: 10.0.0.0/24
       - 10.0.0.0  Network Address
       - 10.0.0.1  Reserved for AWS VPC Router
       - 10.0.0.2 Reserved by AWS. The IP address of the DNS server is always n/w base address +2.
          NOTE: if we have multiple CIDR blocks, then DNS server located on primary CIDR.
       - 10.0.0.3 Reserved by AWS future use.
       - 10.0.0.255 Network Broadcast Address. However AWS desnot support n/w broadcast. So it is reserved.


  Creating a VPC:
      - Click on create vpc , give the name and cidr ex:10.0.0.0/16
    - Create subnets:
      - click on subnets and create subnets pub/private 
         and select the vpc and select the zones and give the cidr within the range of primary cidr.
    - Create NACL:
      - create n/w ACL give name public/private nacl and select the VPC
      - now NACL has inbound/outbount/subnet associations. associate public/prvt NACL with pub/prvt subnets
      - now click on inbound/outbound and allow all traffic for both public and prvt subnet 
        rules with rule number. and destination CIDR as 0.0.0.0/0
    - Create IGW:
      - Click on internet gateway. click on create and save it.
      - click on the newly created IGW and attach it to VPC.
        NOTE: we can aatach only one IGW to VPC.

    - Create RouteTables:
      - Click on the route tables pub/prvt route tables and associate with pub/prvt subnets.
      - Now click on the routetables.  here routes should be 10.0.0.0/16 default for public 
        and prvt route tables
      - To the publi route table.  add the additional route as 0.0.0.0/0 and select IGW. for internet access
    - Create ec2 instane one in public subnet and another in private subnet:
      - we can connect to the ec2 instance which is launched in the pub subnet. through public ip.
      - But we can't connect to the instance in prvt subnet. 
         - To connect to the prvt instance we  need to copy keys to the pub subnet instance and access it.
         - This instance is called as 'BASTION host' or 'JUMP server.'
         - By default the private subnet instance can't connect to internet. TO enable connectivity 
           we need to Add the NAT GATEWAY.
    - NAT gateway:
      - Click on the NAT Gateway and select the public subnet.
      - Then Click on Create a EIP (Elastic IP address) and click on create NAT gateway.
      - Now goto the private route table click on the routes-> add new route
        and route 0.0.0.0/0 and target select the NAT.
      - Now you can connec tto the instane in the prt subnet throgh JUMP server and test
         the internet connectivity it will work.

         


    



 =======================================================================================




==================================================================================================
                                     ROUTE 53
==================================================================================================

Route53:
	Here we can purchase the Domain.
		- Public hosted zone:
         it can be acessed from internet.
		- Private hosted zone:
         only can be accessed from AWS resources.
	DNS Query:
		- A req that is submitted by user to the DNS for a resource that is associated with domain name.

	DNS Record:
		- When we  purchase a domain in AWS . By default it creates 'ns record' and 'SOA' record.
		NOTE:
			- We can create anyone of the below records or all of them. But we can't create two records of Same Types
					EX: we can't have two A Type records for a Single domain with same values.(say same IP's) 
			- But A record can have multiple Values. 
					EX: we can repressent two IPs for single A record.

		Types:
		
			A Record:
				- Maps a domain/sub-domain to the IPV4 Address
      AAAA:
        - Maps a domain/sub-domain to the IPV6 address
			CName:
				- Canonical Name Record
				- Points a Domain or sub domain name to another domain or subdomain 
					 ex: gmail.com to mail.google.com

			Alias Record:
				- A type of record that can be created to route the traffic to the amazon resource
					 like Cluod Front or s3

			ns Record:
				- nameserver record. These servers provide DNS name services.

			SOA:
				- Start of Authority. It has jus the info about 
					 - domain authority  
					 - domain of zone admin.
					 - Zone serial number
					 - refresh time
					 - retry time
					 - expire time
					 - negative caching TTL

	TTL:
		- Time to live: The amount of time in seconds that you want the DNS resolver to cache the values
										of that record before submitting another request to the Route 53 to get the
										current value of that record.

	Zone Apex : 
		-  that is just a domain name like google.com, whizlabz.com

	Routing Policy:
		- A setting of record that defines how Route53 responds to DNS queries  and route traffic.

		NOTE:
			For 'A record' type:
			  - You can choose alias type as ELB, S3 etc., by selecting Alias as 'YES'
			  - Else we need to mention the IP address in the 'Value' Section if the alias is slected as 'NO'

		types:
			- Simple Routing Policy:
				 - Its just a redirection policy. We can do this using ALIAS or IP for A type Record. 
			- Weighted Routing Policy:
				 -  Traffic routed to resource = weight of specific record / sum of weight of all the record.
				 -  We can test the policy using the 'Test Record test.'
				 -  USECASE: 
							This is used incase of redirecting traffic betweeen different version of applications. 
				 - In the management console we have option to enter the weightage value fo a record.
			- Latency Routing Policy:
				 - routing is done based on the request from a region and redirecting that req to the 
					 nearest available hosted server based on the caluclation of latency.
					 NOTE: Latency is calculate d over a period of time. and it may change based on the 
								 routing and connections.
								 For testing purpose we can use this website below for IP's to ping form a specific region
												www.nirsoft.net/countryip/ca.html

			- Geographical Routing Policy:
				 - routing is done based on the geo loaction and connects to that server in that region.
				 - we have to choose the country region from routing policy.
				 - if we don't mention the default location . Then Traffic originating from 
				   other than the mentioned regions won't get any connection to that server.

			- Failover Routing Policy:
				 - This is used if one server goes down then connect to the another server.
				 - It has two Failover record types primary and secondary.
				 - And these failover record types can be associated with the 'Health checks.'
				 - WE CAN FIND THE HEALTH CHECK OPTION BELOW THE HOSTED ZONE.

			- Multi value Answer Routing Policy:
				 - This is used in case of Multiple server hosting smae applications.
				 - It return the IP of the server upto 8 Healthy servers(selected as random) 
				   and doesn't return the ip value of the unhelathy server.
				 -  These A records can be asociated with heath checks.
				 
		


	


OSI MODEL:
	  Open Systems Interconnections

   DATA:
     - Layer 7:  
     	   - APPLICATION LAYER
     	   - End User layer (HTTP, FTP, SSH, DNS)
     	   - APPLICATION LOAD BALANACER operates @LAYER7 i.e is in DATA Section
     - Layer 6:
     	   - PRESENTATION Layer
     	   - Syntax Layer of SSH, SSL, FTP, JPEG
     - Layer 5:
         - SESSION LAYER
         - Sync and send to port (API,Socket)
   Segment:
   	 - LAYER 4:
   	 	   - TRANSPORT LAYER
   	 	   - E2E connection (TCP, UDP)
   	 	   - NETWORK LOAD BALANACER operates @LAYER4 i.e in TRANSPORT section
   Packet:
   	 - LAYER 3:
   	 	   - NETWORK LAYER
   	 	   - packets (IP, IPSec, ICMP)
   Frames:
     - LAYER 2:
         - DATA LINK
         - FRAMES (Switches and Bridges)
   Bits:
   	 - LAYER 1:
   	 	   - BITS
   	 	   - Physical structure (Co-ax Cable, Fiber)



  

ELB AND AutoScaling:

	 - ELB:
	 	  - Elastic Load Balancer
	 	  - Supports Cross-Zone Load Balancing:
	 	  	  - Redirecting the traffic to one or more avilability zones.
	 	  	  - NOTE: 
	 	  	  	  - This is always ENABLED for 'APPLICATION LOAD BALANACER.'
	 	  	      - And DISABLED for the 'NETWORK LOAD BALANACER.'
	 	  - Works with Service like:
	 	  	  - EC2
	 	  	  - ECS
	 	  	  - AutoScaling
	 	  	  - CLOUD Watch
	 	  	  - VPC
	 	  	  - Route53
	 	  	  - Also Supports HYbruid load balancing: 
	 	  	  	  redirecting traffic to On prem and Cloud both based on Health checks
	 	  	  - APPLICATION LOAD BALANCER:
	 	  	   	  - It deals with HTTP/HTTPS Traffic.
	 	  	   	  - operates in the Data Layer @ Layer 7
	 	  	   	  - Highly available
	 	  	   	  - Internet facing or Internal
	 	  	   	  - Health checks
	 	  	   	  - Supports SSL and TLS Certificates
	 	  	   	  - Cross Zone Load Balncing is ENABLED by default
	 	  	  - NETWORK LOAD	BALANCER:
	 	  	   	  - It deals with the TCP/IP Traffic.
	 	  	   	  - Operates in the Transport Layer @ Layer4

	 	  
 =======================================================================================
                      S3 - Simple Storage Service
 =======================================================================================

   S3: It's OBJECT based storage.
       objects: IMAGE/AUDIO/VIDEO/WORD/EXCEL/POWERPOINT etc., any file.
       There is no ability to edit content of the file. only get ,upload, delete and download.
     - Durability: 99.999999999%  # total 11 - 9's over a year
     - By default objects stored in s3 are stored in min, 3 available zones within a region.
     - Highly Scalable and mnaged by AWS
     - Highly Reliable 
     - Fast uploads suing multipart upload options
     - Low price inexpensive:
         s3 standard > s3 standarad infrequent access > s3 on zone infrequent access.
     -  Highly Secure , provide server side and client side encryptions
     - Easy interface for data transfer 
     - Easy integration with other services

   USE-Cases:
   
     - Backup and Recovery
     - Data Archiving
     - Data Lake for Big Data Analytics
     - Hybrid coud Storage
     - Cloud Native Application Data
     - Disaster recovery
     - Don't cases:
         - should not be use for installing OS .
         - should not be used as mounting volume where high I/O operations is needed.
         -  To do these above opeartions EBS should be used:
               - In EBS data is stored in volumes and blocks and split into evenly sized blocks.
               - Each block has its own address but no metadata.
               - When storing large amount of data, the files are split into smaller chunks and
                 distributed among the storage nodes.


     TOPICS:
        - Basic concepts
        - Bucker management
        - Managing Access and Permissions
        - Storage Classes
        - Data Proctection
        - Metadata, tags, and Events
        - Create a Static website
        - Object life cycle management
        - Logging
        - performance management
        - Cross Object Resource sharing
        - Best Pracatises
        - Summary    
       
       Bucket: 
          - A container that stores objects that are uploaded to s3 
          - There wont be any object without a bucket.
          - S3 service console allows to create folders inside a bucket.
          - Every time an object is added to it . it geneerates an unique ID.
          - You can create buckett in any region
            (choose a bucket region that is geographically closest to you.)
          - An object consists of Object data and metadata of objects 
          - S3 doesnt read the Object , but it only reads the metadata associated with it.
        ENDPOINTS:
           this endpoint url is generated based on the bucket region.
           https://s3.us-east-2.amazonaws.com/<bucketname>/image.png
        KEY:
           - Key is basically name of the unique identifier of the Object.
           - Every object in the bucket has exactly one key.
           - The combination of 
              - bucketname
              - key
              - versionID 
             uniquely identifies the objecct in s3.
        Region:
          - while creating bucket we need to choose a region.
          - we can acces the buket from any region.
          - we can replicate the object in a bucket in one region to another region 
             via Cross - Region Replications.
        Data consistency:
          - Depicts how the result would be after certian operation like puts, deletes , gets
            performed on the objects.

          - Eventual consistency for overwrite PUTS and DELETES
              - Object is still readble even after deleting for some period of time.
              - if file name is changed. it takes time to update the change.

          - Read after write consisteny for new PUTS. 
             - if we upload a new object and it is readable immediately.

        API:
          - REST based web services. 
          - PUT, GET, DELETE, POST  for creating, reading, deleting, and updating operations.
          - SOAP supports over HTTP is deprecated. but it is still avilable over HTTPS



      Versioning:
        States of Buckets:
           - Un versioned:
           - Versioning ENABLED:
                 once versoning is enable we cant go backto unversioned state.
           - Versioning Suspened:
                once versioning is enable we can suspend the version

        - Versioning state applies to all of the buckets.
        - Once versioning is enabled. All subsequent add/modified objects are versioned and 
           given an unique id.
        - Object stored in Un-versioned bucket have null as their version id.
        - You have to make the objects of each version as public even if the previous 
           version was public. because newly created objects are not public by default.
        - If we delete and object inthe un version bucket . it 's lost forever
        - if we delete the object in verion enabled bucket. then it adds a delte marker 
        which hides the  objects, to estore deleted object we can delete that marker 








