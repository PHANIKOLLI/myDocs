#https://aws.amazon.com/certification/certified-solutions-architect-associate/
#https://aws.amazon.com/faqs/
CSAA -   Certified Solution Architect - Associate
CSAP - Certified Solution Architect - Professional

CDA - Certified Developer Associate
CSOPA - Certified SysOPS Administrator

READ: FAQ's: WHITEPAPERS: Deep Dive Videos: and Re: Invent: Videos:

WELL ARCHITECTED AWS SOLUTION:

   - Security
   - performance Efficiency
   - Operational Excellence
   - Reliability
   - Cost Optimizations



CSAA-8-topics:
	- Compute:
			- EC2:
				 #https://aws.amazon.com/ec2/faqs/

        Instanes:
        - General Purpose        
            -> t,m   
            -> t2,t3,m3,m4 
            -> low-traffic-websites,web-applications 
            -> small and mid range db's
        - compute optimized     
            -> c    
            -> c3,c4       
            -> high performance frntend fleet of web servers and also for video encoding
        - memory optimized       
            -> x,r   
            -> r3          
            -> high performance databases, distributed mem caches
        - storage optimized      
            -> i,d   
            -> i2,d2       
            -> data warehousing , log or data-processing applications
        - accelerated computing  
            -> p,g,f -> g2          
            -> 3d applications streaming , machine learning
        EBS:
          - EBS are specific to AZ
          - when snapshot is taken they are stored in S3
          - If AZ goes down , still we can recover data 
          - We can send snapshots to other regions as well
           aws cli:
              aws ec2 create snapshot --volume-id <vol-id> --description ""  --region   us-east-2
              aws ec2 delete snapshot --snapshot-id <snap-id> --region   us-east-2
          Recommended way to create snapshot:
             - Pause all writes to volumes
             - Unmount the volume -> take snapshot -> remount the volume 
             -> stop the instance  -take snapshot (for root EBS volumes)
             - Foe encrypted volumes snapshots also creates the same encrypted 

			- Elastic Beanstalk
			- Lambda
	- Storage:
			- S3:
					#https://aws.amazon.com/s3/faqs/
			- Glacier
	- DB:
			- RDS:
					#https://aws.amazon.com/rds/faqs/
			- DyanamoDB
			- Redshift
	- Networking and content delivery:
			- VPC:
					#https://aws.amazon.com/vpc/faqs/

           Public Subnet: for weba nd app servers
           Private Subnet: for database servers
           NAT gateway: private internet access gateway
           Internet gateway: for public instance gateway for internet
           Elastic IP: attached to NAT gateway
           Route table: for public and private subnets
           Route table associations
			- CloudFront
			- Route53:
					#https://aws.amazon.com/route53/faqs/
			- Direct Connect
			- Elastic Load Balancer
	- Security Identity and Compliance:
			- IAM
			- WAF
	- Mgmt and Governance:
			- Cloud Watch 
			- Cloud Formation
			- AutoScaling
			- Config
			- Cloud trail
			- Trusted Advisor
	- Analytics:
			- Kinesis
	- Application Integrations:
			- SQS
			- SNS
			- SWF
	- Others:
		 - AWS WHITEPAPERS
		 - WELL ARCHITECTED FRAMEWORK
		 - Security BEST PRACTISES
=============================================================================================
                                IAM 
=============================================================================================

IAM:
	 - Identity Access Mgmt:
			 #when we create user/group by default it wont have any access to aws resources.
			 #This is called default deny or Non-Explicit -Deny
			 #IAM Users and Groups should be given least access(only the required)  to AWS resources
			- ARN - amazon resource name
			- arn:partition:service:region:account:resource #format
			- we can use arn for 
				users(IAM and federated),groups,policies, instance profiles, vMFA devices, server certificates
			- These are important part of IAM Polices to identify them easily.

			- IAM POLICY:
					- This is attached to either principals or Identity (users, groups, roles)  or resources(s3 bucket)
					- These are stored in JSON format
          - Template of typical IAM policy
            - version: Optional policy wide information
            - statement: one or more
            - effect: Whether policy allows or denies the applications
            - action: List of actions that are allowed or denied
            - resource: List of resources on which action can occur (typically contains ARN resources)
            - principal: Resource based policy who is granted permissions
            - conditions: Circumstances under which the policy grants permissions.

          sample Policy:

          -------------------------------------------------------------------------
           {
             "Version":"2012-07-15"
             "Statement": {
                 "Effect":"Allow"
                 "Action":"dynamodb:*"
                 "Resource":"arn:aws:dynamodb:us-east-2:130983218309:table/Books"
             }
           }

           {
              "Version":"2012-07-15"
              "Statement":{
                "Effect": "Allow"
                "Principal":{"AWS":"arn:iam::777797997897:user/bob"}
                "Action":[
                  "s3:PutObjets"
                  "s3:PutObjectsAcl"
                ]

              }

           } 
          
          -------------------------------------------------------------------------
          sample Policy:
          -------------------------------------------------------------------------
          example1:

             {
               "Version": "2012-05-17"
               "Statement": [
                  {
                    "Effect": "Allow"
                    "Action": [
                       "s3:ListAllMyBuckets",
                       "s3:GetBucketLocation"
                   ],
                   "Resource": "arn:aws:s3:::*"
                  },
                  {
                    "Effect": "Allow"
                    "Action": "s3:ListBucket"
                    "Resource": "arn:aws:s3::::<BUCKET-NAME>",
                    "conditions": "*"
                  },               

               ]            

             }

            -------------------------------------------------------------------------
            example2:
               {
                 "Version": "2012-05-17"
                 "Statement": [
                  {
                    "Effect": "Allow"
                    "Action": "s3:*"
                    "Resources": "*"
                  }
                 ]
               }
           -------------------------------------------------------------------------

					- Identity Policies:
							- Managed Policies:
									- AWS Managed Polices: policies creatd by AWS
									- Customer Managed Policies:
                      - IAM > Policies > Filters > select Customer Managed Policies 
                      - We need not to write the JSON . we can use visual editor and 
                      choose the permissions and JSON will be automatically populated.
							- Inline Policies:
								 - These are attached to particular users,roles
					- Resource Policies:
							- These are attached to the resources like S3 directly.
              - At present, there is only one type of resource-based policy called 
                a role trust policy, which is attached to an IAM role.
              - An IAM role is both an identity and a resource that supports resource-based policies.            
					- POLICY EVALUATION LOGIC:
               - if multiple policies are attached to a user either directly or indirectly from 
                  a group. then it proceeds with default deny.
                  order:
							- Explicit-deny > Explicit-allow  > default deny
          

			- IAM ROLES:
					- Users in AWS account access resources which they dont have access usually.
					- Users in one AWS account to access resource in another AWS account.
					- a mobile app  to use aws resources withoutany aws keys
					- Users who has identities outside of the AWS   
					- Third parties to perform temporary audits.
					- example:
						 -  AWS EC2 to access to S3 (No need to store keys in EC2 if IAM roles are used)
						 -  users in different aws accounts
						 -  Users from externally authenticated Users (web Identity Federation) - google, facebook etc.
						 -  Provide AWS  account owned by third party SAML 2.0 
						 -  WE CAN ATTCH ONLY ONE IAM ROLE TO EC2 Instance at this time:
									- It can be attached to running/stopped instance.
									- free of cost
						 - can't be added to groups
						 - can't make direct request to AWS services; they are meant to be used by authorized entities
							 such as IAM USER , apps , AWS service like EC2.

          - STS:
             - You assume an IAM role by calling the AWS 'Security Token Service' 
               Assume Role API's :
                  - AssumeRole
                  - AssumeRoleWithWebIdentity
                  - AssumeRoleWithSAML (Security Assertion Markup Language)

             - These API's return a set of temporary security Credentials that applications
               can then use to sign requests to AWS service APIs.

          Role:
             A set of permissions that grant access to the aws resources.
          AWS Service Role:
             A role that a service assumes to perform actions in your account on your behalf.
          AWS Service Linked Role:
             Prefedined by service and inludes all the perissions that the service requires to 
             call other AWS services on your behalf.
          Role Chaining:
             Roll chaining occurs when you use a role to assume a second role through AWS CLI.

          Federation:
             Creation of trust relationship between and external Identity provider and AWS.

          Trust Policy:
             JSON format document in which who is allowed to assume role is defined.

          Principal:
             AWS root user, IAM user, role

          Role for cross account access:
             Granting access to the resource in one account to a trusted principal in another account.

      - IAM Best Practises:
          - Lock Away AWS root user access keys
          - Create Individual IAM User
          - Configure strong policy for user
          - Rotate Credentials regularly
          - Remove Unneccesary Credentials
          - Enable MFA for Priviliged Users (i.e user accessing sensitive resources)
          - Use Groups to Assign permission to IAM Users
          - Use AWS defined policies whenever Possible
          - Use policy condition for exta security.
          - Grant Least Priviliges
          - Use AWS Access level to review IAM permissions i.e List, read, Write, All
          - Use Roles to delegate Permissions
          - Monitor activity in AWS account  using Logging features.
          - Logging features are available in CloudFront, CloudTrail, CLoudWatch, Config and S3


  Read IAM Works: 
    https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html

  You can create your own IAM policy using the following link:
    https://awspolicygen.s3.amazonaws.com/policygen.html

    aws s3 ls; #to see the s3 bucket list from cli
    aws s3 mv file1.txt  s3://<bucketname>  #to move file to the bucket
    aws s3 ls s3://<bucketname>  #to see list of files in bucketname

  Read Latest FAQ's:
    https://aws.amazon.com/iam/faqs/
==================================================================================================
                                     ROUTE 53
==================================================================================================

Route53:
	Here we can purchase the Domain.
		- Public hosted zone:
         it can be acessed from internet.
		- Private hosted zone:
         only can be accessed from AWS resources.
	DNS Query:
		- A req that is submitted by user to the DNS for a resource that is associated with domain name.

	DNS Record:
		- When we  purchase a domain in AWS . By default it creates 'ns record' and 'SOA' record.
		NOTE:
			- We can create anyone of the below records or all of them. But we can't create two records of Same Types
					EX: we can't have two A Type records for a Single domain with same values.(say same IP's) 
			- But A record can have multiple Values. 
					EX: we can repressent two IPs for single A record.

		Types:
		
			A Record:
				- Maps a domain/sub-domain to the IPV4 Address
      AAAA:
        - Maps a domain/sub-domain to the IPV6 address
			CName:
				- Canonical Name Record
				- Points a Domain or sub domain name to another domain or subdomain 
					 ex: gmail.com to mail.google.com

			Alias Record:
				- A type of record that can be created to route the traffic to the amazon resource
					 like Cluod Front or s3

			ns Record:
				- nameserver record. These servers provide DNS name services.

			SOA:
				- Start of Authority. It has jus the info about 
					 - domain authority  
					 - domain of zone admin.
					 - Zone serial number
					 - refresh time
					 - retry time
					 - expire time
					 - negative caching TTL

	TTL:
		- Time to live: The amount of time in seconds that you want the DNS resolver to cache the values
										of that record before submitting another request to the Route 53 to get the
										current value of that record.

	Zone Apex : 
		-  that is just a domain name like google.com, whizlabz.com

	Routing Policy:
		- A setting of record that defines how Route53 responds to DNS queries  and route traffic.

		NOTE:
			For 'A record' type:
			  - You can choose alias type as ELB, S3 etc., by selecting Alias as 'YES'
			  - Else we need to mention the IP address in the 'Value' Section if the alias is slected as 'NO'

		types:
			- Simple Routing Policy:
				 - Its just a redirection policy. We can do this using ALIAS or IP for A type Record. 
			- Weighted Routing Policy:
				 -  Traffic routed to resource = weight of specific record / sum of weight of all the record.
				 -  We can test the policy using the 'Test Record test.'
				 -  USECASE: 
							This is used incase of redirecting traffic betweeen different version of applications. 
				 - In the management console we have option to enter the weightage value fo a record.
			- Latency Routing Policy:
				 - routing is done based on the request from a region and redirecting that req to the 
					 nearest available hosted server based on the caluclation of latency.
					 NOTE: Latency is calculate d over a period of time. and it may change based on the 
								 routing and connections.
								 For testing purpose we can use this website below for IP's to ping form a specific region
												www.nirsoft.net/countryip/ca.html

			- Geographical Routing Policy:
				 - routing is done based on the geo loaction and connects to that server in that region.
				 - we have to choose the country region from routing policy.
				 - if we don't mention the default location . Then Traffic originating from 
				   other than the mentioned regions won't get any connection to that server.

			- Failover Routing Policy:
				 - This is used if one server goes down then connect to the another server.
				 - It has two Failover record types primary and secondary.
				 - And these failover record types can be associated with the 'Health checks.'
				 - WE CAN FIND THE HEALTH CHECK OPTION BELOW THE HOSTED ZONE.

			- Multi value Answer Routing Policy:
				 - This is used in case of Multiple server hosting smae applications.
				 - It return the IP of the server upto 8 Healthy servers(selected as random) 
				   and doesn't return the ip value of the unhelathy server.
				 -  These A records can be asociated with heath checks.
				 
		


	


OSI MODEL:
	  Open Systems Interconnections

   DATA:
     - Layer 7:  
     	   - APPLICATION LAYER
     	   - End User layer (HTTP, FTP, SSH, DNS)
     	   - APPLICATION LOAD BALANACER operates @LAYER7 i.e is in DATA Section
     - Layer 6:
     	   - PRESENTATION Layer
     	   - Syntax Layer of SSH, SSL, FTP, JPEG
     - Layer 5:
         - SESSION LAYER
         - Sync and send to port (API,Socket)
   Segment:
   	 - LAYER 4:
   	 	   - TRANSPORT LAYER
   	 	   - E2E connection (TCP, UDP)
   	 	   - NETWORK LOAD BALANACER operates @LAYER4 i.e in TRANSPORT section
   Packet:
   	 - LAYER 3:
   	 	   - NETWORK LAYER
   	 	   - packets (IP, IPSec, ICMP)
   Frames:
     - LAYER 2:
         - DATA LINK
         - FRAMES (Switches and Bridges)
   Bits:
   	 - LAYER 1:
   	 	   - BITS
   	 	   - Physical structure (Co-ax Cable, Fiber)



  

ELB AND AutoScaling:

	 - ELB:
	 	  - Elastic Load Balancer
	 	  - Supports Cross-Zone Load Balancing:
	 	  	  - Redirecting the traffic to one or more avilability zones.
	 	  	  - NOTE: 
	 	  	  	  - This is always ENABLED for 'APPLICATION LOAD BALANACER.'
	 	  	      - And DISABLED for the 'NETWORK LOAD BALANACER.'
	 	  - Works with Service like:
	 	  	  - EC2
	 	  	  - ECS
	 	  	  - AutoScaling
	 	  	  - CLOUD Watch
	 	  	  - VPC
	 	  	  - Route53
	 	  	  - Also Supports HYbruid load balancing: 
	 	  	  	  redirecting traffic to On prem and Cloud both based on Health checks
	 	  	  - APPLICATION LOAD BALANCER:
	 	  	   	  - It deals with HTTP/HTTPS Traffic.
	 	  	   	  - operates in the Data Layer @ Layer 7
	 	  	   	  - Highly available
	 	  	   	  - Internet facing or Internal
	 	  	   	  - Health checks
	 	  	   	  - Supports SSL and TLS Certificates
	 	  	   	  - Cross Zone Load Balncing is ENABLED by default
	 	  	  - NETWORK LOAD	BALANCER:
	 	  	   	  - It deals with the TCP/IP Traffic.
	 	  	   	  - Operates in the Transport Layer @ Layer4

	 	  
 








